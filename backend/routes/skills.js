const express = require('express');
const router = express.Router();
const Skill = require('../models/skill'); // Assurez-vous que Skill est bien dÃ©fini dans vos modÃ¨les Sequelize
const { auth, hasRole } = require('../middleware/authentification');
const { asyncWrapper } = require('../middleware/errors');
const Travaille_sur = require('../models/Travaille_sur');
const a_besoin = require('../models/A_besoin');
const project = require('../models/project');
const users = require('../models/user');

// ðŸ“Œ Route pour rÃ©cupÃ©rer toutes les compÃ©tences
router.get('/', auth, asyncWrapper(async (req, res) => {
    const skills = await Skill.findAll();
    res.status(200).json(skills);
}));

// ðŸ“Œ Route pour crÃ©er une nouvelle compÃ©tence (AccÃ¨s rÃ©servÃ© aux admins)
router.post('/', auth, hasRole('Admin'), asyncWrapper(async (req, res) => {
    const { name } = req.body;

    // VÃ©rifier si la compÃ©tence existe dÃ©jÃ 
    const existingSkill = await Skill.findOne({ where: { name } });
    if (existingSkill) {
        return res.status(400).json({ message: 'Skill already exists' });
    }

    // CrÃ©ation de la nouvelle compÃ©tence
    const newSkill = await Skill.create({ name });
    res.status(201).json(newSkill);
}));

// ðŸ“Œ Route pour rÃ©cupÃ©rer les compÃ©tences d'un utilisateur triÃ©es par projet
router.get('/user/:id', auth, asyncWrapper(async (req, res) => {
    const userId = req.params.id;

    try {
        // VÃ©rifier si l'utilisateur existe
        const userExists = await users.findByPk(userId);
        if (!userExists) {
            return res.status(404).json({ message: 'Utilisateur non trouvÃ©.' });
        }

        // RÃ©cupÃ©rer les projets auxquels l'utilisateur participe
        const userProjects = await Travaille_sur.findAll({
            where: { ID_Users: userId }, // Correspondance avec la structure rÃ©elle
            attributes: [['Id_projects', 'Id_projects']],
        });

        if (!userProjects.length) {
            return res.status(404).json({ message: 'Aucun projet trouvÃ© pour cet utilisateur.' });
        }

        // Extraire la liste des identifiants de projets
        const projectIds = userProjects.map(up => up.Id_projects);

        // RÃ©cupÃ©rer les compÃ©tences liÃ©es aux projets
        const skillsByProject = await a_besoin.findAll({
            where: { id_projects: projectIds },
            include: [
                {
                    model: Skill, // Respect du nom rÃ©el de la table
                    as: 'skill', // VÃ©rifier cet alias dans Sequelize
                    attributes: ['id', 'name', 'description', 'level', 'type'],
                },
                {
                    model: project,
                    as: 'project', // VÃ©rifier cet alias dans Sequelize
                    attributes: ['id', 'name'],
                }
            ]
        });

        if (!skillsByProject.length) {
            return res.status(404).json({ message: 'Aucune compÃ©tence trouvÃ©e pour les projets de cet utilisateur.' });
        }

        // Avec les ID des compÃ©tences retourner les datas des skills
        let result = skillsByProject.map(item => [item.dataValues.id_projects, item.dataValues.id_skill]);

        // Extraction des ID des compÃ©tences
        const skillIds = skillsByProject.map(item => item.dataValues.id_skill);

        // Recherche des compÃ©tences associÃ©es aux ID extraits
        const skillsData = await Skill.findAll({
            where: { id: skillIds }
        });

        // Transformation des rÃ©sultats pour remplacer les ID par les objets de compÃ©tences
        result = result.map(([id_projects, id_skill]) => {
            const skill = skillsData.find(skill => skill.id === id_skill);
            return [id_projects, skill]; // Remplace l'ID skill par l'objet skill complet
        });

        // Structurer les donnÃ©es sous forme d'objet { project_name: [skills] }
        const groupedSkills = {};

        // Modifier la boucle pour utiliser les nouvelles donnÃ©es
        result.forEach(([id_projects, skill]) => {
            const projectName = id_projects; // Nom temporaire (remplace-le par le vrai nom du projet si disponible)

            if (!groupedSkills[projectName]) {
                groupedSkills[projectName] = [];
            }

            groupedSkills[projectName].push({
                id: skill.dataValues.id,
                name: skill.dataValues.name,
                description: skill.dataValues.description,
                level: skill.dataValues.level,
                type: skill.dataValues.type,
                is_active: skill.dataValues.is_active
            });
        });

        // Envoyer la rÃ©ponse JSON
        res.status(200).json(groupedSkills);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Erreur serveur', error: error.message });
    }
}));



// ðŸ“Œ Route pour mettre Ã  jour une compÃ©tence (AccÃ¨s rÃ©servÃ© aux admins)
router.put('/:id', auth, hasRole('Admin'), asyncWrapper(async (req, res) => {
    const { name } = req.body;
    const skill = await Skill.findByPk(req.params.id);

    if (!skill) {
        return res.status(404).json({ message: 'Skill not found' });
    }

    // Mise Ã  jour de la compÃ©tence
    skill.name = name || skill.name;
    await skill.save();
    res.status(200).json(skill);
}));

// ðŸ“Œ Route pour supprimer une compÃ©tence (AccÃ¨s rÃ©servÃ© aux admins)
router.delete('/:id', auth, hasRole('Admin'), asyncWrapper(async (req, res) => {
    const skill = await Skill.findByPk(req.params.id);

    if (!skill) {
        return res.status(404).json({ message: 'Skill not found' });
    }

    await skill.destroy();
    res.status(200).json({ message: 'Skill deleted successfully' });
}));

// ðŸ“Œ Route pour rÃ©cupÃ©rer une compÃ©tence spÃ©cifique par ID
router.get('/:id', auth, asyncWrapper(async (req, res) => {
    const skill = await Skill.findByPk(req.params.id);
    if (!skill) {
        return res.status(404).json({ message: 'Skill not found' });
    }
    res.status(200).json(skill);
}));

module.exports = router;
